*neo-tree.txt*    Plugin to browse the file system and other tree like structures

CONTENTS                                                            *neo-tree*
Introduction ........ |Neo-tree-Introduction|
Basic Usage ......... |Neo-tree-Basic-Usage|
Mappings ............ |Neo-tree-Mappings|
  Navigation ........ |Neo-tree-Navigation|
  View Changes ...... |Neo-tree-View-Changes|
  File Actions ...... |Neo-tree-File-Actions|
  Filter ............ |Neo-tree-Filter|
Configuration ....... |Neo-tree-Configuration|
  Setup ............. |Neo-tree-Setup|
  Highlights ........ |Neo-tree-Highlights|


INTRODUCTION                                            *Neo-tree-Introduction*

Neo-tree is a plugin for nvim that can display tree structures in a sidebar.
The current version supports one source, which is a filesystem browser. Future
versions will add suport for other sources.


BASIC USAGE                                              *Neo-tree-Basic-Usage*

Neo-tree does not define any default commands or keybindings for nvim. The
suggested keybinding is:

nnoremap / lua require('neo-tree').focus()

`focus()` will open the sidebar and focus it if it is closed, and just switch to
the neo-tree window if it is already open. You can also use `show()` which will
do the same if it is closed, but won't switch to the neo-tree window if it is
already open.


===============================================================================
MAPPINGS                                                                      ~
===============================================================================
                                                            *Neo-tree-Mappings*

NAVIGATION                                                *Neo-tree-Navigation*

Within the neo-tree window, the following mappings are defined by default.
Note: The "selected" item is the line the cursor is currently on.

<2-LeftMouse> = open:        Expand or collapse a folder. If a file is selected,
                             open it in the window closest to the tree.
<cr>          = open:        Same as above.
S             = open_split:  Same as open, but opens in a new horizontal split.
s             = open_vsplit: Same as open, but opens in a vertical split
<bs>          = navigate_up: Moves the root directory up one level.
.             = set_root:    Changes the root directory to the currently 
                             selected folder.


FILE ACTIONS                                            *Neo-tree-File-Actions*
a    = add:                  Create a new file or directory.
d    = delete:               Delete the selected file or directory.
r    = rename:               Rename the selected file or directory.
c    = copy_to_clipboard:    Mark file to be copied.
x    = cut_to_clipboard:     Mark file to be cut (moved).
p    = paste_from_clipboard: Copy/move each marked file in the to the
                             selected folder.


VIEW CHANGES                                            *Neo-tree-View-Changes*
H = toggle_hidden:    Toggle whether hidden files (.*) are shown or not.
I = toggle_gitignore: Toggle whether the gitignore file is
                      respected.
R = refresh:          Rescan the filesystem and redraw the tree. Changes
                      made within nvim should be detected automatically, but
                      this is useful for changes made elsewhere.


FILTER                                                        *Neo-tree-Filter*
/     = filter_as_you_type: Filter the tree recursively, searching for
                            files and folders that contain the specified term as
                            you type. This will fd if it is installed, or find.
f     = filter_on_submit:   Same as above, but does not search until you hit
                            enter. Useful if filter_as_you_type is too slow.
<C-x> = clear_filter:       Removes the filter.



================================================================================
CONFIGURATION                                                                  ~
================================================================================
                                                        *Neo-tree-Configuration*

SETUP                                                           *Neo-tree-Setup*

To override the defaults or add new functionality, call the setup() function
with your overrides. For example, to add your own mappings in 'lua':
>
require("neo-tree").setup({
  filesystem = {
    window = {
      mappings = {
        ["<F5>"] = "refresh",
        ["o"] = "open",
      }
    }
  }
})
<
Below is a complete skeleton of all of the configuration options, ready for
copy and paste into your lua config file.

>
local highlights = require('neo-tree.ui.highlights')

require("neo-tree").setup({
  -- The default_source is the one used when calling require('neo-tree').show()
  -- without a source argument.
  default_source = "filesystem",
  popup_border_style = "NC", -- "double", "none", "rounded", "shadow", "single" or "solid"
  -- "NC" is a special style that works well with NormalNC set
  filesystem = {
    window = {
      position = "left",
      width = 40,
      -- Mappings for tree window. See |Neo-tree-Mappings| for built-in 
      -- commands. You can also create your own commands by providing a 
      -- function instead of a string. See the built-in commands for examples.
      mappings = {
        ["<2-LeftMouse>"] = "open",
        ["<cr>"] = "open",
        ["S"] = "open_split",
        ["s"] = "open_vsplit",
        ["<bs>"] = "navigate_up",
        ["."] = "set_root",
        ["H"] = "toggle_hidden",
        ["I"] = "toggle_gitignore",
        ["R"] = "refresh",
        ["/"] = "filter_as_you_type",
        ["f"] = "filter_on_submit",
        ["<C-x>"] = "clear_filter",
        ["a"] = "add",
        ["d"] = "delete",
        ["r"] = "rename",
        ["c"] = "copy_to_clipboard",
        ["x"] = "cut_to_clipboard",
        ["p"] = "paste_from_clipboard",
      }
    },
    search_limit = 50, -- max number of search results when using filters
    filters = {
      show_hidden = false,
      respect_gitignore = true,
    },
    bind_to_cwd = true, -- true creates a 2-way binding between vim's cwd and neo-tree's root
    before_render = function(state)
      -- This function is called after the file system has been scanned,
      -- but before the tree is rendered. You can use this to gather extra
      -- data that can be used in the renderers.
      local utils = require("neo-tree.utils")
      state.git_status_lookup = utils.get_git_status()
    end,
    -- The components section provides custom functions that may be called by 
    -- the renderers below. Each componment is a function that takes the
    -- following arguments:
    --      config: A table containing the configuration provided by the user
    --              when declaring this component in their renderer config.
    --      node:   A NuiNode object for the currently focused node.
    --      state:  The current state of the source providing the items.
    --
    -- The function should return either a table, or a list of tables, each of which
    -- contains the following keys:
    --    text:      The text to display for this item.
    --    highlight: The highlight group to apply to this text.
    components = {
      hello_node = function (config, node, state)
        local text = "Hello " .. node.name
        if state.search_term then
          text = string.format("Hello '%s' in %s", state.search_term, node.name)
        end
        return {
          text = text,
          highlight = config.highlight or highlights.FILE_NAME,
        }
      end
    },
    -- This section provides the renderers that will be used to render the tree.
    -- The first level is the node type.
    -- For each node type, you can specify a list of components to render.
    -- Components are rendered in the order they are specified.
    -- The first field in each component is the name of the function to call.
    -- The rest of the fields are passed to the function as the "config" argument.
    renderers = {
      directory = {
        {
          "icon",
          folder_closed = "",
          folder_open = "",
          padding = " ",
        },
        { "current_filter" },
        { "name" },
        {
          "clipboard",
          highlight = "Comment"
        },
        --{ "git_status" },
      },
      file = {
        {
          "icon",
          default = "*",
          padding = " ",
        },
        --{ "hello_node", highlight = "Normal" }, -- For example, don't actually
        -- use this!
        { "name" },
        {
          "clipboard",
          highlight = "Comment"
        },
        {
          "git_status",
          highlight = "Comment"
        }
      },
    }
  }
})
<

HIGHLIGHTS                                                 *Neo-tree-Highlights*

The following highlight groups are defined by this plugin. If you set any of
these yourself before the plugin loads, it will not be touched. If they do not
exist, they will be created.

NeoTreeCursorLine     |hi-CursorLine| override in Neo-tree window.
NeoTreeDirectoryName  Directory name.
NeoTreeDirectoryIcon  Directory icon.
NeoTreeFileIcon       File icon, when not overriden by devicons.
NeoTreeFileName       File name, when not overwritten by another status.
NeoTreeFileNameOpened File name when the file is open. Not used yet.
NeoTreeFilterTerm     The filter term, as displayed in the root node.
NeoTreeFloatBorder    The border for pop-up windows.
NeoTreeGitAdded       File name when the git status is added.
NeoTreeGitConflict    File name when the git status is conflict.
NeoTreeGitModified    File name when the git status is modified.
NeoTreeGitUntracked   File name when the git status is untracked.
NeoTreeNormal         |hl-Normal| override in Neo-tree window.
NeoTreeNormalNC       |hi-NormalNC| override in Neo-tree window.
NeoTreeRootName       The name of the root node.
NeoTreeTitleBar       Used for the title bar of pop-ups, when the border-style
                      is set to "NC". This is derived from NeoTreeFloatBorder.


vim:tw=80:ts=2:et:ft=help:
